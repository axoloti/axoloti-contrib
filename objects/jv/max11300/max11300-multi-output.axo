<objdefs appVersion="1.0.12">
   <obj.normal id="max11300-multi-output" uuid="cb7832c5-a560-4731-8fd9-7a8b2a86eca2">
      <author>Jan Vantomme</author>
      <license>MIT</license>
      <helpPatch>max11300-multi-output.axh</helpPatch>
      <inlets>
         <frac32 name="cv0" description="CV Input for Channel 0"/>
         <frac32 name="cv1" description="CV Input for Channel 1"/>
         <frac32 name="cv2" description="CV Input for Channel 2"/>
         <frac32 name="cv3" description="CV Input for Channel 3"/>
         <frac32 name="cv4" description="CV Input for Channel 4"/>
         <frac32 name="cv5" description="CV Input for Channel 5"/>
         <frac32 name="cv6" description="CV Input for Channel 6"/>
         <frac32 name="cv7" description="CV Input for Channel 7"/>
         <frac32 name="cv8" description="CV Input for Channel 8"/>
         <frac32 name="cv9" description="CV Input for Channel 9"/>
         <frac32 name="cv10" description="CV Input for Channel 10"/>
         <frac32 name="cv11" description="CV Input for Channel 11"/>
         <frac32 name="cv12" description="CV Input for Channel 12"/>
         <frac32 name="cv13" description="CV Input for Channel 13"/>
         <frac32 name="cv14" description="CV Input for Channel 14"/>
         <frac32 name="cv15" description="CV Input for Channel 15"/>
         <frac32 name="cv16" description="CV Input for Channel 16"/>
         <frac32 name="cv17" description="CV Input for Channel 17"/>
         <frac32 name="cv18" description="CV Input for Channel 18"/>
         <frac32 name="cv19" description="CV Input for Channel 19"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="cv0range" description="CV Output Range for Channel 0">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv1range" description="CV Output Range for Channel 1">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv2range" description="CV Output Range for Channel 2">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv3range" description="CV Output Range for Channel 3">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv4range" description="CV Output Range for Channel 4">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv5range" description="CV Output Range for Channel 5">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv6range" description="CV Output Range for Channel 6">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv7range" description="CV Output Range for Channel 7">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv8range" description="CV Output Range for Channel 8">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv9range" description="CV Output Range for Channel 9">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv10range" description="CV Output Range for Channel 10">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv11range" description="CV Output Range for Channel 11">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv12range" description="CV Output Range for Channel 12">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv13range" description="CV Output Range for Channel 13">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv14range" description="CV Output Range for Channel 14">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv15range" description="CV Output Range for Channel 15">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv16range" description="CV Output Range for Channel 16">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv17range" description="CV Output Range for Channel 17">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv18range" description="CV Output Range for Channel 18">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
         <combo name="cv19range" description="CV Output Range for Channel 19">
            <MenuEntries>
               <string>-5V to 5V</string>
               <string> 0V to 10V</string>
            </MenuEntries>
            <CEntries>
               <string>0x0002</string>
               <string>0x0001</string>
            </CEntries>
         </combo>
      </attribs>
      <depends>
         <depend>SPID1</depend>
      </depends>
      <code.declaration><![CDATA[// Local Data

        #define PIXI_READ       0x01
        #define PIXI_WRITE      0x00

        #define CH_0_TO_10P     0x0001
        #define CH_5N_TO_5P     0x0002

        #define PIXI_DAC_DATA   0x60 

        #define PIXI_DEVICE_ID      0x00
        #define PIXI_DEVICE_CTRL    0x10	// Device main control register
        #define BRST    0x4000
        #define THSHDN  0x0080
        #define RS_CANCEL   0x1000
        #define PIXI_TEMP_INT_HIGH_THRESHOLD     0x19
        #define TMPCTLINT   0x0100
        #define TMPCTLEXT1  0x0200
        #define TMPCTLEXT2  0x0400

        #define PIXI_PORT_CONFIG    0x20
        #define FUNCID              0xF000
        #define FUNCPRM_RANGE       0x0700
        #define CH_MODE_DAC         0x05
        #define DACREF              0x0040
        #define DACCTL              0x000C

		uint8_t *txbuf;
		uint8_t *rxbuf;

        uint16_t info = 0;
        uint16_t read = 0;


		int32_t cv_input_0;
		int32_t cv_input_1;
		int32_t cv_input_2;
		int32_t cv_input_3;
		int32_t cv_input_4;
		int32_t cv_input_5;
		int32_t cv_input_6;
		int32_t cv_input_7;
		int32_t cv_input_8;
		int32_t cv_input_9;
		int32_t cv_input_10;
		int32_t cv_input_11;
		int32_t cv_input_12;
		int32_t cv_input_13;
		int32_t cv_input_14;
		int32_t cv_input_15;
		int32_t cv_input_16;
		int32_t cv_input_17;
		int32_t cv_input_18;
		int32_t cv_input_19;

        // Write Register
        // ------------------------------------

        void WriteRegister(uint8_t address, uint16_t value)
        {
            spiSelect(&SPID1);
            txbuf[0] = ( (address) << 1) | PIXI_WRITE; //write
            txbuf[1] = (value) >> 8; //value H
            txbuf[2] = (value) & 0xFF; //valueL
            spiSend(&SPID1, 3, txbuf);
            spiUnselect(&SPID1);
            //chThdSleepMilliseconds(5);
        }

        // Read Register
        // ------------------------------------

        uint16_t ReadRegister(uint8_t address, bool debug = false)
        {
            uint16_t resultat = 0;
            spiSelect(&SPID1);
            txbuf[0] = ( (address) << 1) | PIXI_READ; //write
            spiSend(&SPID1, 1, txbuf);
            spiReceive(&SPID1, 2, rxbuf);
            resultat = rxbuf[0] << 8 | rxbuf[1];
            spiUnselect(&SPID1);
            return resultat;
        }

        // Write Analog
        // ------------------------------------

        void WriteAnalog(uint8_t channel, uint16_t value)
        {
            spiSelect(&SPID1);
            txbuf[0] = ( ( PIXI_DAC_DATA + channel ) << 1) | PIXI_WRITE;  //write
            txbuf[1] = (value) >> 8; //value H
            txbuf[2] = (value) & 0xFF; //valueL
            spiSend(&SPID1, 3, txbuf);
            spiUnselect(&SPID1);
        }

        // Max Config
        // ------------------------------------

        uint8_t Maxconfig(void)
        {
            uint16_t result = 0;
            uint16_t info = 0;

            result = ReadRegister( PIXI_DEVICE_ID, true );

            if (result == 0x0424) {
                
                // enable default burst, thermal shutdown, leave conversion rate at 200k
                WriteRegister(PIXI_DEVICE_CTRL, !BRST | THSHDN ); // ADCCONV = 00 default.
            
                // enable internal temp sensor
                // disable series resistor cancelation
                info = ReadRegister( PIXI_DEVICE_CTRL, false );
                WriteRegister( PIXI_DEVICE_CTRL, info | !RS_CANCEL );
                
                // keep TMPINTMONCFG at default 4 samples

                // Set int temp hi threshold
                WriteRegister(PIXI_TEMP_INT_HIGH_THRESHOLD, 0x0230 );    // 70 deg C in .125 steps
            
                // Keep int temp lo threshold at 0 deg C, negative values need function to write a two's complement number.
                // enable internal and both external temp sensors
                info = ReadRegister( PIXI_DEVICE_CTRL, false );
                WriteRegister( PIXI_DEVICE_CTRL, info | TMPCTLINT | TMPCTLEXT1 | TMPCTLEXT2 );

            }

            return (result);
        }

        // Config output channel
        // ------------------------------------

        uint16_t configOutput( uint8_t channel, uint16_t range )
        {
            uint16_t result  = 0;
            uint16_t info    = 0;
            uint16_t dac_dat = 0;
            uint8_t  adc_ctl = 0;

            uint8_t channel_mode = CH_MODE_DAC; // CH_MODE_5
            
            // config DACREF (internal reference), DACCTL (sequential update)
            info = ReadRegister( PIXI_DEVICE_CTRL, true );
            
            WriteRegister( PIXI_DEVICE_CTRL, info | DACREF | !DACCTL );
            
            chThdSleepMilliseconds(1);
            
            info = ReadRegister ( PIXI_DEVICE_CTRL, true );
            
            // Enter DACDAT
            WriteRegister( PIXI_DAC_DATA + channel, dac_dat);
            
            chThdSleepMilliseconds(1);
            
            // Mode3,4,5,6,10: config FUNCID, FUNCPRM (non-inverted default)
            WriteRegister( PIXI_PORT_CONFIG + channel, ( ( (channel_mode << 12 ) & FUNCID ) | ( (range << 8 ) & FUNCPRM_RANGE ) ) );
            
            chThdSleepMilliseconds(1);
            
            return (result);
        }


        // SETUP
        // ------------------------------------
    
        void setup(void)
        {
            static uint8_t _txbuf[8] __attribute__ ((section (".sram2")));
            static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));

            txbuf = _txbuf;
            rxbuf = _rxbuf;

            Maxconfig();
        
            chThdSleepMilliseconds( 1 );

            configOutput( 0, attr_cv0range );
            configOutput( 1, attr_cv1range );
            configOutput( 2, attr_cv2range );
            configOutput( 3, attr_cv3range );
            configOutput( 4, attr_cv4range );
            configOutput( 5, attr_cv5range );
            configOutput( 6, attr_cv6range );
            configOutput( 7, attr_cv7range );
            configOutput( 8, attr_cv8range );
            configOutput( 9, attr_cv9range );
		  configOutput( 10, attr_cv10range );
            configOutput( 11, attr_cv11range );
            configOutput( 12, attr_cv12range );
            configOutput( 13, attr_cv13range );
            configOutput( 14, attr_cv14range );
            configOutput( 15, attr_cv15range );
            configOutput( 16, attr_cv16range );
            configOutput( 17, attr_cv17range );
            configOutput( 18, attr_cv18range );
            configOutput( 19, attr_cv19range );

		  LogTextMessage("Range 0: 0x%04x", attr_cv0range );
		  LogTextMessage("Range 1: 0x%04x", attr_cv1range );
		  LogTextMessage("Range 2: 0x%04x", attr_cv2range );
		  LogTextMessage("Range 3: 0x%04x", attr_cv3range );
		  LogTextMessage("Range 4: 0x%04x", attr_cv4range );
		  LogTextMessage("Range 5: 0x%04x", attr_cv5range );
		  LogTextMessage("Range 6: 0x%04x", attr_cv6range );
		  LogTextMessage("Range 7: 0x%04x", attr_cv7range );
		  LogTextMessage("Range 8: 0x%04x", attr_cv8range );
		  LogTextMessage("Range 9: 0x%04x", attr_cv9range );

		  LogTextMessage("Range 10: 0x%04x", attr_cv10range );
		  LogTextMessage("Range 11: 0x%04x", attr_cv11range );
		  LogTextMessage("Range 12: 0x%04x", attr_cv12range );
		  LogTextMessage("Range 13: 0x%04x", attr_cv13range );
		  LogTextMessage("Range 14: 0x%04x", attr_cv14range );
		  LogTextMessage("Range 15: 0x%04x", attr_cv15range );
		  LogTextMessage("Range 16: 0x%04x", attr_cv16range );
		  LogTextMessage("Range 17: 0x%04x", attr_cv17range );
		  LogTextMessage("Range 18: 0x%04x", attr_cv18range );
		  LogTextMessage("Range 19: 0x%04x", attr_cv19range );

        }

        // LOOP
        // ------------------------------------

        void loop(void)
        {
            // Read Input
            uint16_t dacOut0 = ( cv_input_0 >> 15 );
            uint16_t dacOut1 = ( cv_input_1 >> 15 );
            uint16_t dacOut2 = ( cv_input_2 >> 15 );
            uint16_t dacOut3 = ( cv_input_3 >> 15 );
            uint16_t dacOut4 = ( cv_input_4 >> 15 );
            uint16_t dacOut5 = ( cv_input_5 >> 15 );
            uint16_t dacOut6 = ( cv_input_6 >> 15 );
            uint16_t dacOut7 = ( cv_input_7 >> 15 );
            uint16_t dacOut8 = ( cv_input_8 >> 15 );
            uint16_t dacOut9 = ( cv_input_9 >> 15 );
            uint16_t dacOut10 = ( cv_input_10 >> 15 );
            uint16_t dacOut11 = ( cv_input_11 >> 15 );
            uint16_t dacOut12 = ( cv_input_12 >> 15 );
            uint16_t dacOut13 = ( cv_input_13 >> 15 );
            uint16_t dacOut14 = ( cv_input_14 >> 15 );
            uint16_t dacOut15 = ( cv_input_15 >> 15 );
            uint16_t dacOut16 = ( cv_input_16 >> 15 );
            uint16_t dacOut17 = ( cv_input_17 >> 15 );
            uint16_t dacOut18 = ( cv_input_18 >> 15 );
            uint16_t dacOut19 = ( cv_input_19 >> 15 );

            WriteAnalog( 0, dacOut0 );
            WriteAnalog( 1, dacOut1 );
            WriteAnalog( 2, dacOut2 );
            WriteAnalog( 3, dacOut3 );
            WriteAnalog( 4, dacOut4 );
            WriteAnalog( 5, dacOut5 );
            WriteAnalog( 6, dacOut6 );
            WriteAnalog( 7, dacOut7 );
            WriteAnalog( 8, dacOut8 );
            WriteAnalog( 9, dacOut9 );
            WriteAnalog( 10, dacOut10 );
            WriteAnalog( 11, dacOut11 );
            WriteAnalog( 12, dacOut12 );
            WriteAnalog( 13, dacOut13 );
            WriteAnalog( 14, dacOut14 );
            WriteAnalog( 15, dacOut15 );
            WriteAnalog( 16, dacOut16 );
            WriteAnalog( 17, dacOut17 );
            WriteAnalog( 18, dacOut18 );
            WriteAnalog( 19, dacOut19 );            
            
        }

		// ------------------------------------------------------------------------------------------------
		// THREADS
		// ------------------------------------------------------------------------------------------------

		msg_t ThreadX2()
		{
			setup();
			while ( !chThdShouldTerminate() ) {
				loop();
				// chThdSleepMilliseconds( 1 );
			}
	
			chThdExit((msg_t)0);
		}

		static msg_t ThreadX(void *arg) {
			((attr_parent *)arg)->ThreadX2();
		}

		WORKING_AREA(waThreadX, 1024);

		Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);]]></code.init>
      <code.dispose><![CDATA[chThdTerminate( Thd );
chThdWait( Thd );]]></code.dispose>
      <code.krate><![CDATA[this->cv_input_0 = inlet_cv0;
this->cv_input_1 = inlet_cv1;
this->cv_input_2 = inlet_cv2;
this->cv_input_3 = inlet_cv3;
this->cv_input_4 = inlet_cv4;
this->cv_input_5 = inlet_cv5;
this->cv_input_6 = inlet_cv6;
this->cv_input_7 = inlet_cv7;
this->cv_input_8 = inlet_cv8;
this->cv_input_9 = inlet_cv9;
this->cv_input_10 = inlet_cv10;
this->cv_input_11 = inlet_cv11;
this->cv_input_12 = inlet_cv12;
this->cv_input_13 = inlet_cv13;
this->cv_input_14 = inlet_cv14;
this->cv_input_15 = inlet_cv15;
this->cv_input_16 = inlet_cv16;
this->cv_input_17 = inlet_cv17;
this->cv_input_18 = inlet_cv18;
this->cv_input_19 = inlet_cv19;]]></code.krate>
   </obj.normal>
</objdefs>