#ifndef _arraymath_H
#define _arraymath_H

/*
TWO ARRAY OPERATIONS              EXPLANATION
1-addition                        array3[] = array1[] + array2[]
2-subtraction                     array3[] = array1[] - array2[]
3-multiplication                  array3[] = array1[] x array2[]
5-maximum                         array3[] = array1[] > array2[] ? array1[] : array2[]
6-minimum                         array3[] = array1[] < array2[] ? array1[] : array2[]
7-smooth                          array3[] = array1[] * array2[] (dot product) (use in combination with shape generators)

SINGLE ARRAY OPERATIONS
1-offset                          array1[] += offset
1-abs                             array1[]=array1[] > 0 ? array1[] : - array1[]
2-odd/even/step amplitude         array1[i] = ( i & 1 ? array1 x odd_gain : array1 x even_gain ) * ( modulus( i,stepsize ) == 0 ? step_gain : 1 )
6-normalise                       array1[] = norm / rms( array1[++] ) x array[]
7-gain                            array1 = array1 x gain
8-curve                           array1[] = expcurve( array1[] )    -->(inv-)exp&center
3-copy array                      array2 = array1
4-re-order                        array1[ ( array[2] ) ] = array1[i]
5-shift position left/right       array1[ ( i + shift ) & mask ] = array1[i]
9-copy&shift&add array            array1[ | i + shift | ] +=array1[i] x gain
10-fft record                     array2[(writepos*fftsize) + fft_index ] = fft[fft_index] --> records the fft-table into a larger array, enabling to record the spectral envelope of a sound eg. your voice

SHAPE GENERATORS (can be used as either basic spectrum generators as well as window operation)
1-peak generation                 (width,skew,curve) creates a peak-shape like a bandpass filter but with controllable slope&curve both exponential as well as inverse-exponential
2-sine/comb filter generation     (rate,skew,change) creates a shape based on a sine-wave, "frequency" sets the comb-size, fills entire spectrum, so multiply with a peak generator for windowing
3-harmonic jumping                (stepsize,jumpsteps,jumpsize) fills the spectrum but steps through the partials in intervals, jumping with another interval to another part after a number of steps
4-filter shapes                   (cutoff,resonance,mode) creates a filter-based spectrum. So this could be any formula you can find that shows the spectrum-response of a filter.
5-random table                    just fills the table with random values

*/





/*addition*/
void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */

/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;
  q31_t inB1, inB2, inB3, inB4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inB1 = *pSrcB++;
    inB2 = *pSrcB++;

    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    inB3 = *pSrcB++;
    inB4 = *pSrcB++;

    *pDst++ = __USAT(__QADD(inA1>>1, inB1>>1),29)<<1;
    *pDst++ = __USAT(__QADD(inA2>>1, inB2>>1),29)<<1;
    *pDst++ = __USAT(__QADD(inA3>>1, inB3>>1),29)<<1;
    *pDst++ = __USAT(__QADD(inA4>>1, inB4>>1),29)<<1;

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    *pDst++ = __USAT(__QADD(*pSrcA++>>1, *pSrcB++>>1),29)<<1;

    /* Decrement the loop counter */
    blkCnt--;
  }
}








/*subtraction*/
void arm_sub_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */

/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;
  q31_t inB1, inB2, inB3, inB4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inB1 = *pSrcB++;
    inB2 = *pSrcB++;

    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    inB3 = *pSrcB++;
    inB4 = *pSrcB++;

    *pDst++ = __USAT(__QSUB(inA1, inB1),31);
    *pDst++ = __USAT(__QSUB(inA2, inB2),31);
    *pDst++ = __USAT(__QSUB(inA3, inB3),31);
    *pDst++ = __USAT(__QSUB(inA4, inB4),31);

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
    /* C = A - B */
    /* Subtract and then store the result in the destination buffer. */
    *pDst++ =__USAT( __QSUB(*pSrcA++, *pSrcB++),31);

    /* Decrement the loop counter */
    blkCnt--;
  }
}








/*multiplication*/
void arm_mult_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counters */


/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;                  /* temporary input variables */
  q31_t inB1, inB2, inB3, inB4;                  /* temporary input variables */
  q31_t out1, out2, out3, out4;                  /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A * B */
    /* Multiply the inputs and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    inB1 = *pSrcB++;
    inB2 = *pSrcB++;
    inB3 = *pSrcB++;
    inB4 = *pSrcB++;

    out1 = ((q63_t) inA1 * inB1) >> 32;
    out2 = ((q63_t) inA2 * inB2) >> 32;
    out3 = ((q63_t) inA3 * inB3) >> 32;
    out4 = ((q63_t) inA4 * inB4) >> 32;

    out1 = __SSAT(out1, 31);
    out2 = __SSAT(out2, 31);
    out3 = __SSAT(out3, 31);
    out4 = __SSAT(out4, 31);

    *pDst++ = out1 << 1u;
    *pDst++ = out2 << 1u;
    *pDst++ = out3 << 1u;
    *pDst++ = out4 << 1u;

    /* Decrement the blockSize loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
  
  while(blkCnt > 0u)
  {
    /* C = A * B */
    /* Multiply the inputs and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inB1 = *pSrcB++;
    out1 = ((q63_t) inA1 * inB1) >> 32;
    out1 = __SSAT(out1, 31);
    *pDst++ = out1 << 1u;

    /* Decrement the blockSize loop counter */
    blkCnt--;
  }
}








/*maximum*/
void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */

/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;
  q31_t inB1, inB2, inB3, inB4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inB1 = *pSrcB++;
    inB2 = *pSrcB++;

    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    inB3 = *pSrcB++;
    inB4 = *pSrcB++;

    *pDst++ = inA1>inB1?inA1:inB1;
    *pDst++ = inA2>inB2?inA2:inB2;
    *pDst++ = inA3>inB3?inA3:inB3;
    *pDst++ = inA4>inB4?inA4:inB4;

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
     inA1 = *pSrcA++;
     inB1 = *pSrcB++;
    *pDst++ = inA1>inB1?inA1:inB1;

    /* Decrement the loop counter */
    blkCnt--;
  }
}








/*minimum*/
void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */

/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;
  q31_t inB1, inB2, inB3, inB4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inB1 = *pSrcB++;
    inB2 = *pSrcB++;

    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    inB3 = *pSrcB++;
    inB4 = *pSrcB++;

    *pDst++ = inA1<inB1?inA1:inB1;
    *pDst++ = inA2<inB2?inA2:inB2;
    *pDst++ = inA3<inB3?inA3:inB3;
    *pDst++ = inA4<inB4?inA4:inB4;

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
     inA1 = *pSrcA++;
     inB1 = *pSrcB++;
    *pDst++ = inA1<inB1?inA1:inB1;

    /* Decrement the loop counter */
    blkCnt--;
  }
}








/*smooth*/ keep the blocksize at a multiple of 4!! remaining points are discarded
void arm_smooth_q31(
  q31_t * pSrcA,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */
/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4,inA5;
  q31_t inB1, inB2, inB3, inB4;

  /*loop Unrolling */
blkCnt = (blockSize >> 2u)-1;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  q31_t former=*pSrcA;
  while(blkCnt > 0u)
  {
   inA1=(*pSrcA++);
   inA2=(*pSrcA++);
   inA3=(*pSrcA++);
   inA4=(*pSrcA++);
   inA5=(*pSrcA++);
   *pSrcA--;
   *pDst++=(inA1>>1)+(former+inA2>>2);
   *pDst++=(inA2>>1)+(inA1+inA3>>2);
   *pDst++=(inA3>>1)+(inA2+inA4>>2);
   *pDst++=(inA4>>1)+(inA5+inA3>>2);
   former=inA4;
    /* Decrement the loop counter */
    blkCnt--;
  }
   inA1=(*pSrcA++);
   inA2=(*pSrcA++);
   inA3=(*pSrcA++);
   inA4=(*pSrcA++);
   *pDst++=(inA1>>1)+(former+inA2>>2);
   *pDst++=(inA2>>1)+(inA1+inA3>>2);
   *pDst++=(inA3>>1)+(inA2+inA4>>2);
   *pDst++=(inA4>>1)+(inA3+inA4>>2);
}



//SINGLE ARRAY OPERATORS
void arm_offset_q31(
  q31_t * pSrc,
  q31_t offset,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */



/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t in1, in2, in3, in4;


  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A + offset */
    /* Add offset and then store the results in the destination buffer. */
    in1 = *pSrc++;
    in2 = *pSrc++;
    in3 = *pSrc++;
    in4 = *pSrc++;

    *pDst++ = __QADD(in1, offset);
    *pDst++ = __QADD(in2, offset);
    *pDst++ = __QADD(in3, offset);
    *pDst++ = __QADD(in4, offset);

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
    /* C = A + offset */
    /* Add offset and then store the result in the destination buffer. */
    *pDst++ = __QADD(*pSrc++, offset);

    /* Decrement the loop counter */
    blkCnt--;
  }

}

void arm_abs_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */
  q31_t in;                                      /* Input value */



  /* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = |A| */
    /* Calculate absolute of input (if -1 then saturated to 0x7fffffff) and then store the results in the destination buffer. */
    in1 = *pSrc++;
    in2 = *pSrc++;
    in3 = *pSrc++;
    in4 = *pSrc++;

    *pDst++ = (in1 > 0) ? in1 : (q31_t)__QSUB(0, in1);
    *pDst++ = (in2 > 0) ? in2 : (q31_t)__QSUB(0, in2);
    *pDst++ = (in3 > 0) ? in3 : (q31_t)__QSUB(0, in3);
    *pDst++ = (in4 > 0) ? in4 : (q31_t)__QSUB(0, in4);

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;


  while(blkCnt > 0u)
  {
    /* C = |A| */
    /* Calculate absolute value of the input (if -1 then saturated to 0x7fffffff) and then store the results in the destination buffer. */
    in = *pSrc++;
    *pDst++ = (in > 0) ? in : ((in == INT32_MIN) ? INT32_MAX : -in);

    /* Decrement the loop counter */
    blkCnt--;
  }

}


void arm_oddevenstep_q31(
  q31_t * pSrcA,
  q31_t odd,
  q31_t even,
  q31_t stepgain,
  q31_t stepsize,
  q31_t * pDst,
  uint32_t blockSize)
{
  uint32_t blkCnt;                               /* loop counter */

/* Run the below code for Cortex-M4 and Cortex-M3 */
  q31_t inA1, inA2, inA3, inA4;


  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
  int32_t index=0;
  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    inA1 = *pSrcA++;
    inA2 = *pSrcA++;
    inA3 = *pSrcA++;
    inA4 = *pSrcA++;
    if( ( ( index++ ) % stepsize )==0 ){inA1=((q63_t)inA1 * stepgain  >>32);}
    if( ( ( index++ ) % stepsize )==0 ){inA2=((q63_t)inA2 * stepgain  >>32);}
    if( ( ( index++ ) % stepsize )==0 ){inA3=((q63_t)inA3 * stepgain  >>32);}
    if( ( ( index++ ) % stepsize )==0 ){inA4=((q63_t)inA4 * stepgain  >>32);}
    *pDst++ = ((q63_t)inA1 * odd  >>32);
    *pDst++ = ((q63_t)inA2 * even >>32);
    *pDst++ = ((q63_t)inA3 * odd  >>32);
    *pDst++ = ((q63_t)inA4 * even >>32);

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
   inA1 = *pSrcA++;
   if( ( ( index ) % stepsize )==0 ){inA1=((q63_t)inA1 * stepgain  >>32);}
   *pDst++ = ((q63_t)inA1 * ((index++)&1?odd:even)  >>32);
    /* Decrement the loop counter */
    blkCnt--;
  }
}


void arm_normalise_q31(
  q31_t * pSrc,
  q31_t * pDest,
  uint32_t blockSize
  )
{
  q63_t sum = 0;                                 /* accumulator */
  q31_t in;                                      /* Temporary variable to store the input */
  uint32_t blkCnt;                               /* loop counter */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  q31_t in1, in2, in3, in4;                      /* Temporary input variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.        
   ** a second loop below computes the remaining 1 to 7 samples. */
  while(blkCnt > 0u)
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum */
    /* read two samples from source buffer */
    in1 = pSrc[0];
    in2 = pSrc[1];

    /* calculate power and accumulate to accumulator */
    sum += (q63_t) in1 *in1>>6;
    sum += (q63_t) in2 *in2>>6;

    /* read two samples from source buffer */
    in3 = pSrc[2];
    in4 = pSrc[3];

    /* calculate power and accumulate to accumulator */
    sum += (q63_t) in3 *in3>>6;
    sum += (q63_t) in4 *in4>>6;


    /* update source buffer to process next samples */
    pSrc += 4u;

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 8, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum */
    in = *pSrc++;
    sum += (q63_t) in *in>>5;

    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Convert data in 2.62 to 1.31 by 31 right shifts and saturate */
  /* Compute Rms and store the result in the destination vector */
  q31_t rslt;
  arm_sqrt_q31(clip_q63_to_q31((sum / (q63_t) blockSize) >> 31), rslt);
  float32_t ratio=(float32_t)(7<<23)/rslt;
  int32_t scale=(1<<21)*ratio;
  blkCnt = blockSize >> 2u;
  pSrc -= (blkCnt)u;
    while(blkCnt > 0u)
  {
*pDst++=((q63_t)(*pSrc++)*scale)>>32
*pDst++=((q63_t)(*pSrc++)*scale)>>32
*pDst++=((q63_t)(*pSrc++)*scale)>>32
*pDst++=((q63_t)(*pSrc++)*scale)>>32

blkCnt--;
  }
}

#endif

