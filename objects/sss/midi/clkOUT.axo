<objdefs appVersion="1.0.12">
   <obj.normal id="clkOUT" uuid="430dcde7-c6f7-4f2a-bf11-39ff1a17203f">
      <sDescription>main midi clock module with song position and several extra boolean triggers to communicate with other axoloti&apos;s.
Comes with it&apos;s own receive module for proper functioning of the midi messages! (clkIN module)
reset/random/triggers are send as a single combined midiCC value whenever any one of them go high (each input being one bit) to reduce message count if several get updated at the same time. NOTE! No &quot;off&quot; message will be send as the receiver does this automatically, again, to save message count.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_out.axh</helpPatch>
      <inlets>
         <bool32.risingfalling name="start"/>
         <bool32.risingfalling name="stop"/>
         <bool32.risingfalling name="continue"/>
         <frac32 name="tempo" description="frequency rate of the main clock LFO"/>
         <bool32 name="triplets"/>
         <bool32.risingfalling name="reset"/>
         <bool32.risingfalling name="random"/>
         <bool32.risingfalling name="trg1"/>
         <bool32.risingfalling name="trg2"/>
         <bool32.risingfalling name="trg3"/>
         <int32 name="temperament" description="sends the main temperament selection"/>
         <frac32 name="stretch" description="sends the main stretch amount"/>
         <int32 name="note1"/>
         <int32 name="note2"/>
         <int32 name="note3"/>
         <int32 name="note4"/>
         <int32 name="note5"/>
         <int32 name="note6"/>
         <int32 name="note7"/>
         <bool32 name="resend"/>
      </inlets>
      <outlets>
         <int32 name="position"/>
         <bool32 name="active"/>
         <bool32 name="clock"/>
         <bool32 name="reset"/>
         <bool32 name="random"/>
         <frac32 name="mainrate"/>
         <bool32 name="triplets"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="swing1"/>
         <frac32.u.map name="swing2"/>
      </params>
      <attribs>
         <combo name="device">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="CH" description="midichannel for sending main settings over CC" MinValue="1" MaxValue="16" DefaultValue="0"/>
         <spinner name="CC" description="start midiCC for sending all the main settings over CC (up to +13)" MinValue="1" MaxValue="127" DefaultValue="0"/>
      </attribs>
      <code.declaration><![CDATA[int pos,trg,act,ACT,stop,rnd,rst,latch[9],trip,resend;
int32_t rate=-(1<<30);
int32_t phs,prv,pv;
int Do=1;]]></code.declaration>
      <code.init><![CDATA[for(int i=0;i<9;i++)
{
	latch[i]=0;
}
ACT=0;]]></code.init>
      <code.krate><![CDATA[int AS=inlet_start||inlet_continue;

int32_t freq;
MTOF(inlet_tempo,freq)
freq=freq>>2;
outlet_mainrate=inlet_tempo;
outlet_clock=0;
int32_t p3;

int in[9];
in[0]=inlet_note1;
in[1]=inlet_note2;
in[2]=inlet_note3;
in[3]=inlet_note4;
in[4]=inlet_note5;
in[5]=inlet_note6;
in[6]=inlet_note7;
in[7]=inlet_temperament;
in[8]=inlet_stretch>>21;

if(ACT)
{
	phs+=freq>>2;
	p3=phs;

	uint32_t p4=p3;
	uint32_t p5=p3;
	p4=___SMMUL(p4>>1,p4>>1)<<2;
	p3=(p5>>2)+(___SMMUL((p4>>2)-(p5>>2),param_swing1<<4))<<3;

	p4=p3;
	p5=p3;
	p4=___SMMUL(p4>>1,p4>>1)<<2;
	p3=(p5>>2)+(___SMMUL((p4>>2)-(p5>>2),param_swing2<<4))<<3;
	if((p3>=0)&&!(prv>=0))
	{
		pos+=1;
		MidiSend3((midi_device_t) attr_device, MIDI_SONG_POSITION,pos&127,pos>>7);
	}
	uint32_t p2=phs<<1;
	int32_t Phs=(p2)*(inlet_triplets?3:2);
	
	if((Phs>=0)&&(pv<0))
	{
		outlet_clock=1;
		MidiSend1((midi_device_t) attr_device,MIDI_TIMING_CLOCK);
	}

	pv=Phs;
}

int RST=inlet_reset+(inlet_random<<1)+(inlet_trg1<<2)+(inlet_trg2<<3)+(inlet_trg3<<4);

if((!(rate==inlet_tempo))||((RST>0)&&!rst))
{
	rate=inlet_tempo;
	int32_t rt=__USAT(inlet_tempo+(1<<27),28);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+10,rt&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+11,(rt>>7)&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+12,(rt>>14)&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+13,(rt>>21)&127);
}

if(AS&&!act){
	act=1;
	ACT=1;
	if(inlet_start)
	{
		MidiSend1((midi_device_t) attr_device, MIDI_START);
		pos=0;
		phs=0;
		prv=0;
		outlet_clock=1;
	}
	else
	{
		MidiSend1((midi_device_t) attr_device, MIDI_CONTINUE);
	}
	MidiSend3((midi_device_t) attr_device, MIDI_SONG_POSITION,pos&127,pos>>7);
	for(int i=0;i<9;i++)
	{
	
		latch[i]=in[i];
		MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+i+1,__USAT(in[i]+(i==7?0:64),7));
	}
}
else if(!AS){act=0;}

if(inlet_stop&&!stop){
	stop=1;
	ACT=0;
	MidiSend1((midi_device_t) attr_device, MIDI_STOP);

}
else if(!inlet_stop){stop=0;}

outlet_active=ACT;
int DO=0;
outlet_reset=0;
outlet_random=0;


if(!(inlet_triplets==trip))
{
	DO=1;
	trip=inlet_triplets;
	RST+=(inlet_triplets<<5);
}


for(int i=0;i<9;i++)
{
	if (!(latch[i]==in[i]))
	{
		latch[i]=in[i];
		MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+i+1,__USAT(in[i]+(i==7?0:64),7));
	}


}


if(((RST>0)&&!rst)||DO){	
	rst=1;
	DO=0;
	if(inlet_reset)
	{
		outlet_reset=1;
	}
	if(inlet_random)
	{
		outlet_random=1;
	}
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC,__USAT(RST,7));
}
else if((RST<1)&&rst){rst=0;}

if(inlet_resend&&!resend)
{
	resend=1;
	int32_t rt=__USAT(inlet_tempo+(1<<27),28);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+10,rt&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+11,(rt>>7)&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+12,(rt>>14)&127);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+13,(rt>>21)&127);
	for(int i=0;i<9;i++)
	{
		MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_CH-1),attr_CC+i+1,__USAT(in[i]+(i==7?0:64),7));
	}
	MidiSend1((midi_device_t) attr_device, MIDI_CONTINUE);
}
else if(!inlet_resend){resend=0;}


outlet_position=pos;
outlet_triplets=inlet_triplets;
outlet_reset=inlet_reset;
outlet_random=inlet_random;

Do=0;
prv=p3;]]></code.krate>
   </obj.normal>
</objdefs>