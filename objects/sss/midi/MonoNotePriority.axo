<objdefs appVersion="1.0.12">
   <obj.normal id="MonoNotePriority" uuid="84d62128-b45b-4fea-b78a-0b91f5273c77">
      <sDescription>Module that controls the voice allocation for mono functionality
This module goes into the main patch, receives your polyphonic midi data and saves/removes them to/from the table at notes on/off respectively.
Then sends the right midi off&amp;on messages to close the currently playing voice and start a new voice that is still held over midi (but not playing yet/anymore).

The receiving midi modules can either be in the main patch or in a patcher container when selecting internal midi. BUT! 
Be careful not to send your midi to the same channel the module is receiving it&apos;s data! This creates a midi loop that crashes the axoloti!
When sending out over external midi device, host or usb, you can select any output channel.

4 priority modes:
-0: last/newest note priority: always play last played note, but if this one goes off, it takes the next last note that is still being held.
-1: lowest note priority: always play the lowest note that is currently played. When this note goes off, it takes the next lowest note.
-2: highest note priority: always play the highest note that is currently played. When this note goes off, it takes the next highest note.
-3: loudest note priority: always play the note with the highest velocity that is currently played. When this note goes off, it takes the next highest velocity. Follow the loudest screamers!</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_in.axh</helpPatch>
      <inlets>
         <int32 name="priority" description="0=last,1=lowest,2=highest,3=loudest. Note priority updates only when notes on/off are generated."/>
      </inlets>
      <outlets/>
      <displays/>
      <params>
         <int32.hradio name="priority" description="last,lowest,highest,loudest" noLabel="true">
            <MaxValue i="4"/>
         </int32.hradio>
      </params>
      <attribs>
         <combo name="midichannel_in">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
            </CEntries>
         </combo>
         <combo name="device_out">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="midichannel_out">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t note[16];
int8_t vel[16];
int8_t cnote;
int8_t cvel;
int8_t cpos;
int8_t total;
int priority;]]></code.declaration>
      <code.init><![CDATA[for(int i=0;i<16;i++)
{
	note[i]=-1;
	vel[i]=-1;
}
cnote=-1;
cvel=-1;
cpos=-1;
total=0;]]></code.init>
      <code.krate><![CDATA[priority=(param_priority+inlet_priority)&3;;]]></code.krate>
      <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel__in) && (data2))
{
	int pos=0;
	while(vel[pos]>0)//check for unused voice (up to 16 voices in memory)
	{
		pos+=1;
		if(pos==16)//if table is full
		{
			for(int i=0;i<15;i++)//remove oldest note in the table and shift other notes 1 down
			{
				note[i]=note[i+1];
				vel[i]=vel[i+1];
			}
			note[15]=data1;//add the new note at the end of the list
			vel[15]=data2;
			;break;
		}
		
	}
	if(pos<16)
	{
		note[pos]=data1;
		vel[pos]=data2;
		total+=1;
		total=total>16?16:total;
	}
	pos=__USAT(pos,4);
	switch(priority)//select priority mode
	{
		case 0://last note priority
		if((!(cnote==data1)))
		{
			if(!(cnote==-1))
			{
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
			}
			cnote=data1;
			cvel=data2;
			cpos=pos;
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
			
		}
		;break;
		case 1:
					if((data1<cnote)||(cnote==-1))
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 2:
					if(data1>cnote)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 3:
					if(data2>cvel)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
	}
	
}
else if
(((status == MIDI_NOTE_ON + attr_midichannel__in) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel__in))
{
	int rem=0;
	for(int i=0;i<16;i++)
	{
		if(note[i]==data1)
		{
			rem=1;
			for(int j=i;j<15;j++)
			{
				note[j]=note[j+1];
				vel[j]=vel[j+1];
			}
			note[15]=-1;
			vel[15]=-1;
			;break;
		}
	}
	
		switch(priority)
		{
			case 0:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						cpos=__USAT(total-1,8);
						if(cpos>0)
						{
							cpos-=1;
							cnote=note[cpos];
							cvel=vel[cpos];
							total-=1;
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
						}
						else if(cpos==0)
						{
							total=0;
							cpos=-1;
							cnote=-1;
							cvel=-1;
						}
					}
					else if(rem)
					{
						cpos-=1;
						total-=1;
					}
			;break;
			case 1:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int min=128;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]<min)&&(note[i]>=0))
						{
							min=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 2:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]>max)&&(note[i]>=0))
						{
							max=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 3:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((vel[i]>max)&&(vel[i]>=0))
						{
							max=vel[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			
		}
	
	
}
else if((status == attr_midichannel__in + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF))
{
	PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_CONTROL_CHANGE + (attr_midichannel__out),MIDI_C_ALL_NOTES_OFF,0);
  	for(int i=0;i<16;i++)
  	{
  		vel[i]=0;
  	}
}]]></code.midihandler>
   </obj.normal>
</objdefs>