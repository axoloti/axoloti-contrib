<objdefs appVersion="1.0.12">
   <obj.normal id="sendPatch" uuid="1c4bd2ca-0df4-4848-a351-e13973335a72">
      <sDescription>Midi patch-index control module to switch patches in other boards.
Use together with the patchloader module in the receiving board!

Enables you to use different midichannel and/or midiCC to control the patch index of your other boards.
First sends out the minimum and maximum patch-index to make sure the patchchanges wrap around within the desired index range when using next/previous patch (eg. limit between patch index 3 and 5 for a certain song) or to jump to a certain patch index straight away.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>midi_out.axh</helpPatch>
      <inlets>
         <bool32 name="next" description="send a &quot;next patch&quot; command"/>
         <bool32 name="prev" description="send a &quot;previous patch&quot; command"/>
         <int32 name="maxPatch" description="set the maximum patch index that may be selected"/>
         <int32 name="minPatch" description="set the minimum patch index that may be selected"/>
         <bool32 name="jump" description="send a &quot;jump immediately to patch index&quot; command"/>
         <int32 name="2Patch" description="sets patch index to jump to immediately"/>
      </inlets>
      <outlets>
         <bool32 name="trig"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="device" description="sets midi device to send patch change">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <spinner name="channel" description="sets midi channel to send patchchange" MinValue="1" MaxValue="16" DefaultValue="15"/>
         <spinner name="minCC" description="sets midiCC to send minimum patch index" MinValue="0" MaxValue="127" DefaultValue="1"/>
         <spinner name="maxCC" description="sets midiCC to send maximum patch index" MinValue="0" MaxValue="127" DefaultValue="2"/>
         <spinner name="nextCC" description="sets midiCC to send &quot;next patch&quot; change" MinValue="0" MaxValue="127" DefaultValue="3"/>
         <spinner name="prevCC" description="sets midiCC to send &quot;previous patch&quot; change" MinValue="0" MaxValue="127" DefaultValue="4"/>
         <spinner name="timer" MinValue="2" MaxValue="5000" DefaultValue="1000"/>
      </attribs>
      <code.declaration><![CDATA[int nxt,prv,trg,jmp,timer;]]></code.declaration>
      <code.init><![CDATA[nxt=0;
prv=0;
trg=0;]]></code.init>
      <code.krate><![CDATA[if (nxt) {MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_nextCC,1);nxt=0;}
if (prv) {MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_prevCC,1);prv=0;}
outlet_trig=0;
if(timer>0)
{
	timer-=1;
	if(timer==0)
	{
		outlet_trig=1;
	}
}

int DO=inlet_next||inlet_prev||inlet_jump;
if(DO&&!trg)
{
	timer=attr_timer;
	trg=1;
	if(inlet_next||inlet_prev)
	{
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_maxCC,inlet_maxPatch);
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_minCC,inlet_minPatch);
	nxt=inlet_next;
	prv=inlet_prev;
	}
	if(inlet_jump)
	{
		MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_maxCC,inlet_2Patch);
		MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_minCC,inlet_2Patch);
		nxt=inlet_jump;
	}
}
else if(!DO){trg=0;}]]></code.krate>
   </obj.normal>
</objdefs>