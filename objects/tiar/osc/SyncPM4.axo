<objdefs appVersion="1.0.12">
   <obj.normal id="SyncPM4" uuid="f3f70be2-3538-4568-a5bf-8e48c8f689da">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>SyncPM4.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32.bipolar name="pitchC"/>
         <frac32.bipolar name="pitchM1"/>
         <frac32.bipolar name="pitchM2"/>
         <frac32.bipolar name="pitchM3"/>
         <frac32.bipolar name="index1C"/>
         <frac32.bipolar name="index21"/>
         <frac32.bipolar name="index32"/>
         <frac32.bipolar name="phiC"/>
         <frac32.bipolar name="phiM1"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out" description=""/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.s.map.pitch name="pitchC"/>
         <frac32.s.map.pitch name="pitchM1"/>
         <frac32.s.map.pitch name="pitchM2"/>
         <frac32.s.map.pitch name="pitchM3"/>
         <frac32.u.map name="index1C"/>
         <frac32.u.map name="index21"/>
         <frac32.u.map name="index32"/>
      </params>
      <attribs>
         <combo name="phase" description="phase">
            <MenuEntries>
               <string>0</string>
               <string>90</string>
               <string>180</string>
               <string>270</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>0.25</string>
               <string>0.5</string>
               <string>0.75</string>
            </CEntries>
         </combo>
         <combo name="env">
            <MenuEntries>
               <string>1/10</string>
               <string>1/2</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[uint32_t pC,  pM1,  pM2,  pM3;
int32_t dpC, dpM1, dpM2, dpM3;
int32_t index1C, index21, index32;
float pMast;
float dpMast, _dpMast;]]></code.declaration>
      <code.init><![CDATA[uint32_t pC = pM1 = pM2 = pM3 = 0;
pMast = attr_phase;]]></code.init>
      <code.krate><![CDATA[int32_t idp;
MTOFEXTENDED(inlet_pitch + param_pitch, idp);
dpMast = (0.25f / (1 << 30)) * idp;
_dpMast = 1.0f / dpMast;

MTOFEXTENDED(inlet_pitchC  + param_pitchC,  dpC);
MTOFEXTENDED(inlet_pitchM3 + param_pitchM3, dpM3);
MTOFEXTENDED(inlet_pitchM2 + param_pitchM2, dpM2);
MTOFEXTENDED(inlet_pitchM1 + param_pitchM1, dpM1);
index1C = inlet_index1C + param_index1C;
index21 = inlet_index21 + param_index21;
index32 = inlet_index32 + param_index32;]]></code.krate>
      <code.srate><![CDATA[pM2 += dpM2;
pM3 += dpM3;
int32_t m23 = (___SMMLA(index32, sine2t[pM3 >> 20], pM2 >> 7) >> 13) & 4095;
pM1 += dpM1;
int32_t m12 = (___SMMLA(index21, sine2t[m23], pM1 >> 7) >> 13) & 4095;
pC += dpC;
int32_t y = sine2t[(___SMMLA(index1C, sine2t[m12], pC >> 7) >> 13) & 4095] >> 5;

#if attr_env==1
if(pMast>0.9f){
	y = (int32_t)(y*10*(1-pMast));
} 
if(pMast<0.1f){
	y = (int32_t)(y*10*pMast);
}

#else
y = (int32_t)(y*2*(pMast>0.5f?1-pMast:pMast));
#endif

// _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pMast += dpMast;
if(pMast > 1){
  pMast -= 1;
  float a = pMast * _dpMast;
  pC  = (uint32_t)(a * dpC) + (inlet_phiC<<5);
  pM1 = (uint32_t)(a * dpM1) + (inlet_phiM1<<5);
  pM2 = (uint32_t)(a * dpM2);
  pM3 = (uint32_t)(a * dpM3);
/*  y = (y + (sine2t[(___SMMLA(index, sine2t[pM >> 20], pC >> 7) >> 13) & 4095] >> 5)) >> 1;*/
}
outlet_out = y;]]></code.srate>
   </obj.normal>
</objdefs>