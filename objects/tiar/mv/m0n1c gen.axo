<objdefs appVersion="1.0.12">
   <obj.normal id="m0n1c gen" uuid="01938c1f-5f4d-495b-a5cf-034b690c2417">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <inlets>
         <int32 name="type"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <objref name="mv"/>
      </attribs>
      <code.declaration><![CDATA[int16_t IWF[2*16*32]={	  
/*   0,  126,  250,  367,  472,  561,  631,  679,  704,  704,  679,  631,  561,  472,  367,  250,  126,    0, -124, -241, -346, -435, -505, -553, -578, -578, -553, -505, -435, -346, -241, -124,
   0,  126,  243,  332,  380,  380,  332,  243,  126,    0, -117, -206, -254, -254, -206, -117,    0,  126,  243,  332,  380,  380,  332,  243,  126,    0, -117, -206, -254, -254, -206, -117, 
   0,  126,  231,  279,  254,  165,   41,  -76, -146, -146,  -76,   41,  165,  254,  279,  231,  126,    0, -105, -153, -128,  -39,   85,  202,  272,  272,  202,   85,  -39, -128, -153, -105, 
   0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89, 
   0,  126,  196,  148,   24,  -65,  -40,   77,  182,  182,   77,  -40,  -65,   24,  148,  196,  126,    0,  -70,  -22,  102,  191,  166,   49,  -56,  -56,   49,  166,  191,  102,  -22,  -70, 
   0,  126,  174,   85,  -32,  -32,   85,  174,  126,    0,  -48,   41,  158,  158,   41,  -48,    0,  126,  174,   85,  -32,  -32,   85,  174,  126,    0,  -48,   41,  158,  158,   41,  -48, 
   0,  126,  151,   34,  -36,   53,  158,  110,  -14,  -14,  110,  158,   53,  -36,   34,  151,  126,    0,  -25,   92,  162,   73,  -32,   16,  140,  140,   16,  -32,   73,  162,   92,  -25, 
   0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0, 
   0,  126,  101,  -16,   54,  143,   38,  -10,  114,  114,  -10,   38,  143,   54,  -16,  101,  126,    0,   25,  142,   72,  -17,   88,  136,   12,   12,  136,   88,  -17,   72,  142,   25, 
   0,  126,   78,  -11,  106,  106,  -11,   78,  126,    0,   48,  137,   20,   20,  137,   48,    0,  126,   78,  -11,  106,  106,  -11,   78,  126,    0,   48,  137,   20,   20,  137,   48, 
   0,  126,   56,    8,  132,   43,   18,  135,   30,   30,  135,   18,   43,  132,    8,   56,  126,    0,   70,  118,   -6,   83,  108,   -9,   96,   96,   -9,  108,   83,   -6,  118,   70, 
   0,  126,   37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89, 
   0,  126,   21,   69,   94,    5,  129,   12,   82,   82,   12,  129,    5,   94,   69,   21,  126,    0,  105,   57,   32,  121,   -3,  114,   44,   44,  114,   -3,  121,   32,   57,  105, 
   0,  126,    9,   98,   50,   50,   98,    9,  126,    0,  117,   28,   76,   76,   28,  117,    0,  126,    9,   98,   50,   50,   98,    9,  126,    0,  117,   28,   76,   76,   28,  117, 
   0,  126,    2,  119,   14,  103,   33,   81,   56,   56,   81,   33,  103,   14,  119,    2,  126,    0,  124,    7,  112,   23,   93,   45,   70,   70,   45,   93,   23,  112,    7,  124, 
   0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89, 
   */ 
// phase offset to limit peaks
-505, -435, -346, -241, -124,    0,  126,  250,  367,  472,  561,  631,  679,  704,  704,  679,  631,  561,  472,  367,  250,  126,    0, -124, -241, -346, -435, -505, -553, -578, -578, -553,   
   0, -117, -206, -254, -254, -206, -117,    0,  126,  243,  332,  380,  380,  332,  243,  126,    0, -117, -206, -254, -254, -206, -117,    0,  126,  243,  332,  380,  380,  332,  243,  126,   
  41,  -76, -146, -146,  -76,   41,  165,  254,  279,  231,  126,    0, -105, -153, -128,  -39,   85,  202,  272,  272,  202,   85,  -39, -128, -153, -105,    0,  126,  231,  279,  254,  165,     
 215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215,  215,  126,    0,  -89,  -89,    0,  126,  215, 
 -56,  -56,   49,  166,  191,  102,  -22,  -70,    0,  126,  196,  148,   24,  -65,  -40,   77,  182,  182,   77,  -40,  -65,   24,  148,  196,  126,    0,  -70,  -22,  102,  191,  166,   49, 
  85,  174,  126,    0,  -48,   41,  158,  158,   41,  -48,    0,  126,  174,   85,  -32,  -32,   85,  174,  126,    0,  -48,   41,  158,  158,   41,  -48,    0,  126,  174,   85,  -32,  -32, 
 -36,   34,  151,  126,    0,  -25,   92,  162,   73,  -32,   16,  140,  140,   16,  -32,   73,  162,   92,  -25,    0,  126,  151,   34,  -36,   53,  158,  110,  -14,  -14,  110,  158,   53,
   0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,    0,    0,  126,  126,
  72,  142,   25,    0,  126,  101,  -16,   54,  143,   38,  -10,  114,  114,  -10,   38,  143,   54,  -16,  101,  126,    0,   25,  142,   72,  -17,   88,  136,   12,   12,  136,   88,  -17,
 -11,  106,  106,  -11,   78,  126,    0,   48,  137,   20,   20,  137,   48,    0,  126,   78,  -11,  106,  106,  -11,   78,  126,    0,   48,  137,   20,   20,  137,   48,    0,  126,   78,   
 126,    0,   70,  118,   -6,   83,  108,   -9,   96,   96,   -9,  108,   83,   -6,  118,   70,    0,  126,   56,    8,  132,   43,   18,  135,   30,   30,  135,   18,   43,  132,    8,   56,
  37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89,    0,  126,   37,   37,  126,    0,   89,   89,    0,  126,  
  -3,  114,   44,   44,  114,   -3,  121,   32,   57,  105,    0,  126,   21,   69,   94,    5,  129,   12,   82,   82,   12,  129,    5,   94,   69,   21,  126,    0,  105,   57,   32,  121, 
   9,   98,   50,   50,   98,    9,  126,    0,  117,   28,   76,   76,   28,  117,    0,  126,    9,   98,   50,   50,   98,    9,  126,    0,  117,   28,   76,   76,   28,  117,    0,  126, 
 124,    0,  126,    2,  119,   14,  103,   33,   81,   56,   56,   81,   33,  103,   14,  119,    2,  126,    0,  124,    7,  112,   23,   93,   45,   70,   70,   45,   93,   23,  112,    7, 
   0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89, 


   0,   89,  178,  267,  356,  445,  534,  623,  712,  801,  890,  979, 1068, 1157, 1246, 1335, 1424, 1335, 1246, 1157, 1068,  979,  890,  801,  712,  623,  534,  445,  356,  267,  178,   89, 
   0,   89,  178,  267,  356,  445,  534,  623,  712,  623,  534,  445,  356,  267,  178,   89,    0,   89,  178,  267,  356,  445,  534,  623,  712,  623,  534,  445,  356,  267,  178,   89, 
   0,   89,  178,  267,  356,  267,  178,   89,    0,  -89, -178, -267, -356, -267, -178,  -89,    0,  -89, -178, -267, -356, -267, -178,  -89,    0,   89,  178,  267,  356,  267,  178,   89, 
   0,   89,  178,  267,  356,  267,  178,   89,    0,   89,  178,  267,  356,  267,  178,   89,    0,   89,  178,  267,  356,  267,  178,   89,    0,   89,  178,  267,  356,  267,  178,   89, 
   0,   89,  178,   89,    0,  -89, -178,  -89,    0,   89,  178,   89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,   89,  178,   89,    0,  -89, -178,  -89,    0,   89,  178,   89, 
   0,   89,  178,   89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,   89,  178,   89,    0,   89,  178,   89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,   89,  178,   89, 
   0,   89,  178,   89,    0,   89,  178,   89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,  -89, -178,  -89,    0,   89,  178,   89,    0,   89,  178,   89, 
   0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89,    0,   89,  178,   89, 
   0,   89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,   89, 
   0,   89,    0,  -89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,  -89,    0,   89, 
   0,   89,    0,  -89,    0,  -89,    0,   89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,   89,    0,  -89,    0,  -89,    0,   89, 
   0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89, 
   0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,   89,    0,   89, 
   0,   89,    0,   89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,   89,    0,   89, 
   0,   89,    0,   89,    0,   89,    0,   89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,  -89,    0,   89,    0,   89,    0,   89,    0,   89, 
   0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89,    0,   89 
};

int h;
int32_t Iv[32];
int32_t curAmp[16];
int8_t curType[16];
int32_t newAmp[16];
int8_t newType[16];


//LENGTHMASK 31
int32_t I1p32(uint32_t p){
	
  // p 5q27
  // the interpolation coefficient
  int32_t a  = (p<<4) & 0x7FFFFFFF;  
  // the segment number
  uint32_t i = (p>>27);

  //Iv[i] + a*(Iv[i+1]-Iv[i])
  //       q31
  return ___SMMLA(a, Iv[(i+1)&31] - Iv[i], Iv[i]>>1);

}]]></code.declaration>
      <code.init><![CDATA[for(int s = 0; s < 32; s++){
	Iv[s] = 0;
}
for(int i = 0; i < 16; i++){
	curAmp[i] = 0;
}
h = 0;]]></code.init>
      <code.krate><![CDATA[newAmp[h] = attr_mv.get(h)>>8;
newType[h] = inlet_type & 1;
int16_t *IWFCH = IWF + 32*(h+16*curType[h]);
int16_t *IWFNH = IWF + 32*(h+16*newType[h]);

for(int s = 0; s < 32; s++){
	Iv[s] -= curAmp[h] * IWFCH[s];
	Iv[s] += newAmp[h] * IWFNH[s];
}
curAmp[h]  = newAmp[h];
curType[h] = newType[h];

h++; h &= 15;]]></code.krate>
   </obj.normal>
</objdefs>