<objdefs appVersion="1.0.12">
   <obj.normal id="m0n1c gen" uuid="01938c1f-5f4d-495b-a5cf-034b690c2417">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <inlets>
         <int32 name="type"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <objref name="mv"/>
      </attribs>
      <includes>
         <include>./tiar_m0n1c.h</include>
      </includes>
      <code.declaration><![CDATA[int h;
int32_t Iv[32];
int32_t curAmp[16];
int8_t curType[16];
int32_t newAmp[16];
int8_t newType[16];


//LENGTHMASK 31
int32_t I1p32(uint32_t p){
	
  // p 5q27
  // the interpolation coefficient
  int32_t a  = (p<<4) & 0x7FFFFFFF;  
  // the segment number
  uint32_t i = (p>>27);

  //Iv[i] + a*(Iv[i+1]-Iv[i])
  //       q31
  return ___SMMLA(a, Iv[(i+1)&31] - Iv[i], Iv[i]>>1);

}

int32_t I1p32(int32_t nt, uint32_t p){
	return I1p32(p);
}]]></code.declaration>
      <code.init><![CDATA[for(int s = 0; s < 32; s++){
	Iv[s] = 0;
}
for(int i = 0; i < 16; i++){
	curAmp[i] = 0;
}
h = 0;]]></code.init>
      <code.krate><![CDATA[newAmp[h] = attr_mv.get(h)>>8;
newType[h] = inlet_type & 1;
const int16_t *IWFCH = &tiar_m0n1c_IWF[32*(h+16*curType[h])];
const int16_t *IWFNH = &tiar_m0n1c_IWF[32*(h+16*newType[h])];

for(int s = 0; s < 32; s++){
	Iv[s] -= curAmp[h] * IWFCH[s];
	Iv[s] += newAmp[h] * IWFNH[s];
}
curAmp[h]  = newAmp[h];
curType[h] = newType[h];

h++; h &= 15;]]></code.krate>
   </obj.normal>
</objdefs>