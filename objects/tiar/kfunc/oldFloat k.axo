<objdefs>
   <obj.normal id="oldFloat" uuid="1f2e19ff-43d1-4580-aa27-c7e732252e53">
      <sDescription>A quantifier that simulates old float formats with limited accuracy as found on early digital synthesizers.</sDescription>
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <inlets>
         <frac32 name="in"/>
      </inlets>
      <outlets>
         <frac32 name="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="resolution">
            <MenuEntries>
               <string>5 bits</string>
               <string>6 bits</string>
               <string>7 bits</string>
               <string>8 bits</string>
               <string>2 bits</string>
               <string>3 bits</string>
               <string>4 bits</string>
            </MenuEntries>
            <CEntries>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration/>
      <code.init/>
      <code.krate><![CDATA[
// __CLZ counts leading zeros
int32_t offset = 32 - __CLZ(abs(inlet_in)) - attr_resolution;
if(offset <= 0){
  outlet_out = inlet_in;
} else {
  //erases some low bits depending of leading zeros and resolution
  outlet_out = (inlet_in >> offset) << offset;
}
/*
union Y { float f; int32_t i; } y; 
y.f = arm::q_to_float(inlet_in, 27);
#if attr_resolution == 5              
y.i &= 0xFFFF8000;
#elif attr_resolution == 6
y.i &= 0xFFFFC000;
#elif attr_resolution == 7
y.i &= 0xFFFFE000;
#elif attr_resolution == 8
y.i &= 0xFFFFF000;
#elif attr_resolution == 3
y.i &= 0xFFFE0000;
#else
y.i &= 0xFFFF0000;
#endif
outlet_out=arm::float_to_q(y.f, 27);
*/


]]></code.krate>
   </obj.normal>
</objdefs>
